// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ApiLambdaStack Should_MatchSnapshot_When_ApiLambdaCombinesAllOptions: ApiLambdaStackCompleteTest 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "DockerImageFunctionm47testlambdateststackE2C1657B": {
      "DependsOn": [
        "LambdaRoleDefaultPolicy75625A82",
        "LambdaRole3A44B857",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-container-assets-NORMALIZED_HASH",
          },
        },
        "Environment": {
          "Variables": {
            "ASPNETCORE_ENVIRONMENT": "Test",
          },
        },
        "FunctionName": "test-function-test",
        "MemorySize": 128,
        "PackageType": "Image",
        "ReservedConcurrentExecutions": 3,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole3A44B857",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test",
          },
          {
            "Key": "Project",
            "Value": "test",
          },
          {
            "Key": "StackId",
            "Value": "m47-test-lambda-test-stack",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "SecurityGroupm47testlambdateststack0D75B4A8",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": "ApiLambdaStackCompleteTest:ExportsOutputRefvpcPrivateSubnet1Subnet934893E8236E2271",
            },
            {
              "Fn::ImportValue": "ApiLambdaStackCompleteTest:ExportsOutputRefvpcPrivateSubnet2Subnet7031C2BA60DCB1EE",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DockerImageFunctionm47testlambdateststackSqsEventSourceApiLambdaStackCompleteTestm47testlambdateststackQueuem47testlambdateststack2CF9491889597FAE": {
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:us-east-1:123456789012:test-queue",
        "FunctionName": {
          "Ref": "DockerImageFunctionm47testlambdateststackE2C1657B",
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test",
          },
          {
            "Key": "Project",
            "Value": "test",
          },
          {
            "Key": "StackId",
            "Value": "m47-test-lambda-test-stack",
          },
        ],
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "LambdaRole3A44B857": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "Roletest-functionTest",
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaRoleDefaultPolicy75625A82": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "lambda:InvokeFunction",
                "lambda:InvokeAsync",
                "rds-data:*",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "ds:CreateComputer",
                "ds:DescribeDirectories",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:GetParameterHistory",
                "ssm:GetParametersByPath",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ListQueues",
                "sns:Publish",
                "cloudformation:DescribeStacks",
                "cloudformation:ListStackResources",
                "cloudwatch:ListMetrics",
                "cloudwatch:GetMetricData",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "kms:ListAliases",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:ListAttachedRolePolicies",
                "iam:ListRolePolicies",
                "iam:ListRoles",
                "lambda:*",
                "states:DescribeStateMachine",
                "states:ListStateMachines",
                "tag:GetResources",
                "xray:GetTraceSummaries",
                "xray:BatchGetTraces",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "iam:PassRole",
              "Condition": {
                "StringEquals": {
                  "iam:PassedToService": "lambda.amazonaws.com",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:DescribeLogStreams",
                "logs:GetLogEvents",
                "logs:FilterLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:TagResource",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*",
            },
            {
              "Action": [
                "s3:*",
                "s3-object-lambda:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:sqs:us-east-1:123456789012:test-queue",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaRoleDefaultPolicy75625A82",
        "Roles": [
          {
            "Ref": "LambdaRole3A44B857",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SecurityGroupm47testlambdateststack0D75B4A8": {
      "Properties": {
        "GroupDescription": "m47-test-lambda-test-stack-SecurityGroup2",
        "GroupName": "m47-test-lambda-test-stack-SecurityGroup2",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTPS outbound",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTP outbound",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          {
            "CidrIp": {
              "Fn::ImportValue": "ApiLambdaStackCompleteTest:ExportsOutputFnGetAttvpcA2121C38CidrBlock8A3D0BD6",
            },
            "Description": "Allow PostgreSQL inbound from VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
          {
            "CidrIp": "10.0.0.0/16",
            "Description": "Allow PostgreSQL inbound from legacy VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
        ],
        "VpcId": {
          "Fn::ImportValue": "ApiLambdaStackCompleteTest:ExportsOutputRefvpcA2121C384D1B3CDE",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`ApiLambdaStack Should_MatchSnapshot_When_ApiLambdaStackIsCreated: ApiLambdaStackTest 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "DockerImageFunctionm47testlambdateststackE2C1657B": {
      "DependsOn": [
        "LambdaRoleDefaultPolicy75625A82",
        "LambdaRole3A44B857",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-container-assets-NORMALIZED_HASH",
          },
        },
        "Environment": {
          "Variables": {
            "ASPNETCORE_ENVIRONMENT": "Test",
          },
        },
        "FunctionName": "test-function-test",
        "MemorySize": 128,
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole3A44B857",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test",
          },
          {
            "Key": "Project",
            "Value": "test",
          },
          {
            "Key": "StackId",
            "Value": "m47-test-lambda-test-stack",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "SecurityGroupm47testlambdateststack0D75B4A8",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": "ApiLambdaStackTest:ExportsOutputRefvpcPrivateSubnet1Subnet934893E8236E2271",
            },
            {
              "Fn::ImportValue": "ApiLambdaStackTest:ExportsOutputRefvpcPrivateSubnet2Subnet7031C2BA60DCB1EE",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaRole3A44B857": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "Roletest-functionTest",
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaRoleDefaultPolicy75625A82": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "lambda:InvokeFunction",
                "lambda:InvokeAsync",
                "rds-data:*",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "ds:CreateComputer",
                "ds:DescribeDirectories",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:GetParameterHistory",
                "ssm:GetParametersByPath",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ListQueues",
                "sns:Publish",
                "cloudformation:DescribeStacks",
                "cloudformation:ListStackResources",
                "cloudwatch:ListMetrics",
                "cloudwatch:GetMetricData",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "kms:ListAliases",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:ListAttachedRolePolicies",
                "iam:ListRolePolicies",
                "iam:ListRoles",
                "lambda:*",
                "states:DescribeStateMachine",
                "states:ListStateMachines",
                "tag:GetResources",
                "xray:GetTraceSummaries",
                "xray:BatchGetTraces",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "iam:PassRole",
              "Condition": {
                "StringEquals": {
                  "iam:PassedToService": "lambda.amazonaws.com",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:DescribeLogStreams",
                "logs:GetLogEvents",
                "logs:FilterLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:TagResource",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*",
            },
            {
              "Action": [
                "s3:*",
                "s3-object-lambda:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaRoleDefaultPolicy75625A82",
        "Roles": [
          {
            "Ref": "LambdaRole3A44B857",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SecurityGroupm47testlambdateststack0D75B4A8": {
      "Properties": {
        "GroupDescription": "m47-test-lambda-test-stack-SecurityGroup2",
        "GroupName": "m47-test-lambda-test-stack-SecurityGroup2",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTPS outbound",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTP outbound",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          {
            "CidrIp": {
              "Fn::ImportValue": "ApiLambdaStackTest:ExportsOutputFnGetAttvpcA2121C38CidrBlock8A3D0BD6",
            },
            "Description": "Allow PostgreSQL inbound from VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
          {
            "CidrIp": "10.0.0.0/16",
            "Description": "Allow PostgreSQL inbound from legacy VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
        ],
        "VpcId": {
          "Fn::ImportValue": "ApiLambdaStackTest:ExportsOutputRefvpcA2121C384D1B3CDE",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`ApiLambdaStack Should_MatchSnapshot_When_ApiLambdaStackWithReservedConcurrencyIsCreated: ApiLambdaStackWithReservedConcurrencyTest 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "DockerImageFunctionm47testlambdateststackE2C1657B": {
      "DependsOn": [
        "LambdaRoleDefaultPolicy75625A82",
        "LambdaRole3A44B857",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-container-assets-NORMALIZED_HASH",
          },
        },
        "Environment": {
          "Variables": {
            "ASPNETCORE_ENVIRONMENT": "Test",
          },
        },
        "FunctionName": "test-function-test",
        "MemorySize": 128,
        "PackageType": "Image",
        "ReservedConcurrentExecutions": 5,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole3A44B857",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test",
          },
          {
            "Key": "Project",
            "Value": "test",
          },
          {
            "Key": "StackId",
            "Value": "m47-test-lambda-test-stack",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "SecurityGroupm47testlambdateststack0D75B4A8",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": "ApiLambdaStackWithReservedConcurrency:ExportsOutputRefvpcPrivateSubnet1Subnet934893E8236E2271",
            },
            {
              "Fn::ImportValue": "ApiLambdaStackWithReservedConcurrency:ExportsOutputRefvpcPrivateSubnet2Subnet7031C2BA60DCB1EE",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaRole3A44B857": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "Roletest-functionTest",
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaRoleDefaultPolicy75625A82": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "lambda:InvokeFunction",
                "lambda:InvokeAsync",
                "rds-data:*",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "ds:CreateComputer",
                "ds:DescribeDirectories",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:GetParameterHistory",
                "ssm:GetParametersByPath",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ListQueues",
                "sns:Publish",
                "cloudformation:DescribeStacks",
                "cloudformation:ListStackResources",
                "cloudwatch:ListMetrics",
                "cloudwatch:GetMetricData",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "kms:ListAliases",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:ListAttachedRolePolicies",
                "iam:ListRolePolicies",
                "iam:ListRoles",
                "lambda:*",
                "states:DescribeStateMachine",
                "states:ListStateMachines",
                "tag:GetResources",
                "xray:GetTraceSummaries",
                "xray:BatchGetTraces",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "iam:PassRole",
              "Condition": {
                "StringEquals": {
                  "iam:PassedToService": "lambda.amazonaws.com",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:DescribeLogStreams",
                "logs:GetLogEvents",
                "logs:FilterLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:TagResource",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*",
            },
            {
              "Action": [
                "s3:*",
                "s3-object-lambda:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaRoleDefaultPolicy75625A82",
        "Roles": [
          {
            "Ref": "LambdaRole3A44B857",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SecurityGroupm47testlambdateststack0D75B4A8": {
      "Properties": {
        "GroupDescription": "m47-test-lambda-test-stack-SecurityGroup2",
        "GroupName": "m47-test-lambda-test-stack-SecurityGroup2",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTPS outbound",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTP outbound",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          {
            "CidrIp": {
              "Fn::ImportValue": "ApiLambdaStackWithReservedConcurrency:ExportsOutputFnGetAttvpcA2121C38CidrBlock8A3D0BD6",
            },
            "Description": "Allow PostgreSQL inbound from VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
          {
            "CidrIp": "10.0.0.0/16",
            "Description": "Allow PostgreSQL inbound from legacy VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
        ],
        "VpcId": {
          "Fn::ImportValue": "ApiLambdaStackWithReservedConcurrency:ExportsOutputRefvpcA2121C384D1B3CDE",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`ApiLambdaStack Should_MatchSnapshot_When_ApiLambdaWithCustomEnvVarsIsCreated: ApiLambdaStackWithEnvVarsTest 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "DockerImageFunctionm47testlambdateststackE2C1657B": {
      "DependsOn": [
        "LambdaRoleDefaultPolicy75625A82",
        "LambdaRole3A44B857",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-container-assets-NORMALIZED_HASH",
          },
        },
        "Environment": {
          "Variables": {
            "API_KEY": "api-key-value",
            "ASPNETCORE_ENVIRONMENT": "Test",
            "LOG_LEVEL": "INFO",
            "REGION": "us-east-1",
          },
        },
        "FunctionName": "test-function-test",
        "MemorySize": 128,
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole3A44B857",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test",
          },
          {
            "Key": "Project",
            "Value": "test",
          },
          {
            "Key": "StackId",
            "Value": "m47-test-lambda-test-stack",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "SecurityGroupm47testlambdateststack0D75B4A8",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": "ApiLambdaStackWithEnvVarsTest:ExportsOutputRefvpcPrivateSubnet1Subnet934893E8236E2271",
            },
            {
              "Fn::ImportValue": "ApiLambdaStackWithEnvVarsTest:ExportsOutputRefvpcPrivateSubnet2Subnet7031C2BA60DCB1EE",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaRole3A44B857": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "Roletest-functionTest",
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaRoleDefaultPolicy75625A82": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "lambda:InvokeFunction",
                "lambda:InvokeAsync",
                "rds-data:*",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "ds:CreateComputer",
                "ds:DescribeDirectories",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:GetParameterHistory",
                "ssm:GetParametersByPath",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ListQueues",
                "sns:Publish",
                "cloudformation:DescribeStacks",
                "cloudformation:ListStackResources",
                "cloudwatch:ListMetrics",
                "cloudwatch:GetMetricData",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "kms:ListAliases",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:ListAttachedRolePolicies",
                "iam:ListRolePolicies",
                "iam:ListRoles",
                "lambda:*",
                "states:DescribeStateMachine",
                "states:ListStateMachines",
                "tag:GetResources",
                "xray:GetTraceSummaries",
                "xray:BatchGetTraces",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "iam:PassRole",
              "Condition": {
                "StringEquals": {
                  "iam:PassedToService": "lambda.amazonaws.com",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:DescribeLogStreams",
                "logs:GetLogEvents",
                "logs:FilterLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:TagResource",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*",
            },
            {
              "Action": [
                "s3:*",
                "s3-object-lambda:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaRoleDefaultPolicy75625A82",
        "Roles": [
          {
            "Ref": "LambdaRole3A44B857",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SecurityGroupm47testlambdateststack0D75B4A8": {
      "Properties": {
        "GroupDescription": "m47-test-lambda-test-stack-SecurityGroup2",
        "GroupName": "m47-test-lambda-test-stack-SecurityGroup2",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTPS outbound",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTP outbound",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          {
            "CidrIp": {
              "Fn::ImportValue": "ApiLambdaStackWithEnvVarsTest:ExportsOutputFnGetAttvpcA2121C38CidrBlock8A3D0BD6",
            },
            "Description": "Allow PostgreSQL inbound from VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
          {
            "CidrIp": "10.0.0.0/16",
            "Description": "Allow PostgreSQL inbound from legacy VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
        ],
        "VpcId": {
          "Fn::ImportValue": "ApiLambdaStackWithEnvVarsTest:ExportsOutputRefvpcA2121C384D1B3CDE",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`ApiLambdaStack Should_MatchSnapshot_When_RoleWithPoliciesIsCreated: ApiLambdaStackRolePolicyTest 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "DockerImageFunctionm47testlambdateststackE2C1657B": {
      "DependsOn": [
        "LambdaRoleDefaultPolicy75625A82",
        "LambdaRole3A44B857",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-container-assets-NORMALIZED_HASH",
          },
        },
        "Environment": {
          "Variables": {
            "ASPNETCORE_ENVIRONMENT": "Test",
          },
        },
        "FunctionName": "test-function-test",
        "MemorySize": 128,
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole3A44B857",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test",
          },
          {
            "Key": "Project",
            "Value": "test",
          },
          {
            "Key": "StackId",
            "Value": "m47-test-lambda-test-stack",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "SecurityGroupm47testlambdateststack0D75B4A8",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": "ApiLambdaStackRolePolicyTest:ExportsOutputRefvpcPrivateSubnet1Subnet934893E8236E2271",
            },
            {
              "Fn::ImportValue": "ApiLambdaStackRolePolicyTest:ExportsOutputRefvpcPrivateSubnet2Subnet7031C2BA60DCB1EE",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaRole3A44B857": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "Roletest-functionTest",
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaRoleDefaultPolicy75625A82": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "lambda:InvokeFunction",
                "lambda:InvokeAsync",
                "rds-data:*",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "ds:CreateComputer",
                "ds:DescribeDirectories",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:GetParameterHistory",
                "ssm:GetParametersByPath",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ListQueues",
                "sns:Publish",
                "cloudformation:DescribeStacks",
                "cloudformation:ListStackResources",
                "cloudwatch:ListMetrics",
                "cloudwatch:GetMetricData",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "kms:ListAliases",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:ListAttachedRolePolicies",
                "iam:ListRolePolicies",
                "iam:ListRoles",
                "lambda:*",
                "states:DescribeStateMachine",
                "states:ListStateMachines",
                "tag:GetResources",
                "xray:GetTraceSummaries",
                "xray:BatchGetTraces",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "iam:PassRole",
              "Condition": {
                "StringEquals": {
                  "iam:PassedToService": "lambda.amazonaws.com",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:DescribeLogStreams",
                "logs:GetLogEvents",
                "logs:FilterLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:TagResource",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*",
            },
            {
              "Action": [
                "s3:*",
                "s3-object-lambda:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaRoleDefaultPolicy75625A82",
        "Roles": [
          {
            "Ref": "LambdaRole3A44B857",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SecurityGroupm47testlambdateststack0D75B4A8": {
      "Properties": {
        "GroupDescription": "m47-test-lambda-test-stack-SecurityGroup2",
        "GroupName": "m47-test-lambda-test-stack-SecurityGroup2",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTPS outbound",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTP outbound",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          {
            "CidrIp": {
              "Fn::ImportValue": "ApiLambdaStackRolePolicyTest:ExportsOutputFnGetAttvpcA2121C38CidrBlock8A3D0BD6",
            },
            "Description": "Allow PostgreSQL inbound from VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
          {
            "CidrIp": "10.0.0.0/16",
            "Description": "Allow PostgreSQL inbound from legacy VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
        ],
        "VpcId": {
          "Fn::ImportValue": "ApiLambdaStackRolePolicyTest:ExportsOutputRefvpcA2121C384D1B3CDE",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`ApiLambdaStack Should_MatchSnapshot_When_SecurityGroupRulesAreCreated: ApiLambdaStackSecurityGroupTest 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "DockerImageFunctionm47testlambdateststackE2C1657B": {
      "DependsOn": [
        "LambdaRoleDefaultPolicy75625A82",
        "LambdaRole3A44B857",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-container-assets-NORMALIZED_HASH",
          },
        },
        "Environment": {
          "Variables": {
            "ASPNETCORE_ENVIRONMENT": "Test",
          },
        },
        "FunctionName": "test-function-test",
        "MemorySize": 128,
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole3A44B857",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test",
          },
          {
            "Key": "Project",
            "Value": "test",
          },
          {
            "Key": "StackId",
            "Value": "m47-test-lambda-test-stack",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "SecurityGroupm47testlambdateststack0D75B4A8",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": "ApiLambdaStackSecurityGroupTest:ExportsOutputRefvpcPrivateSubnet1Subnet934893E8236E2271",
            },
            {
              "Fn::ImportValue": "ApiLambdaStackSecurityGroupTest:ExportsOutputRefvpcPrivateSubnet2Subnet7031C2BA60DCB1EE",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaRole3A44B857": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "Roletest-functionTest",
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaRoleDefaultPolicy75625A82": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "lambda:InvokeFunction",
                "lambda:InvokeAsync",
                "rds-data:*",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "ds:CreateComputer",
                "ds:DescribeDirectories",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:GetParameterHistory",
                "ssm:GetParametersByPath",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ListQueues",
                "sns:Publish",
                "cloudformation:DescribeStacks",
                "cloudformation:ListStackResources",
                "cloudwatch:ListMetrics",
                "cloudwatch:GetMetricData",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "kms:ListAliases",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:ListAttachedRolePolicies",
                "iam:ListRolePolicies",
                "iam:ListRoles",
                "lambda:*",
                "states:DescribeStateMachine",
                "states:ListStateMachines",
                "tag:GetResources",
                "xray:GetTraceSummaries",
                "xray:BatchGetTraces",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "iam:PassRole",
              "Condition": {
                "StringEquals": {
                  "iam:PassedToService": "lambda.amazonaws.com",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:DescribeLogStreams",
                "logs:GetLogEvents",
                "logs:FilterLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:TagResource",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*",
            },
            {
              "Action": [
                "s3:*",
                "s3-object-lambda:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaRoleDefaultPolicy75625A82",
        "Roles": [
          {
            "Ref": "LambdaRole3A44B857",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SecurityGroupm47testlambdateststack0D75B4A8": {
      "Properties": {
        "GroupDescription": "m47-test-lambda-test-stack-SecurityGroup2",
        "GroupName": "m47-test-lambda-test-stack-SecurityGroup2",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTPS outbound",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTP outbound",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          {
            "CidrIp": {
              "Fn::ImportValue": "ApiLambdaStackSecurityGroupTest:ExportsOutputFnGetAttvpcA2121C38CidrBlock8A3D0BD6",
            },
            "Description": "Allow PostgreSQL inbound from VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
          {
            "CidrIp": "10.0.0.0/16",
            "Description": "Allow PostgreSQL inbound from legacy VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
        ],
        "VpcId": {
          "Fn::ImportValue": "ApiLambdaStackSecurityGroupTest:ExportsOutputRefvpcA2121C384D1B3CDE",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`ApiLambdaStack Should_MatchSnapshot_When_SqsQueueIsConnectedToApiLambda: ApiLambdaStackWithSqsTest 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "DockerImageFunctionm47testlambdateststackE2C1657B": {
      "DependsOn": [
        "LambdaRoleDefaultPolicy75625A82",
        "LambdaRole3A44B857",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-container-assets-NORMALIZED_HASH",
          },
        },
        "Environment": {
          "Variables": {
            "ASPNETCORE_ENVIRONMENT": "Test",
          },
        },
        "FunctionName": "test-function-test",
        "MemorySize": 128,
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole3A44B857",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test",
          },
          {
            "Key": "Project",
            "Value": "test",
          },
          {
            "Key": "StackId",
            "Value": "m47-test-lambda-test-stack",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "SecurityGroupm47testlambdateststack0D75B4A8",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": "ApiLambdaStackWithSqs:ExportsOutputRefvpcPrivateSubnet1Subnet934893E8236E2271",
            },
            {
              "Fn::ImportValue": "ApiLambdaStackWithSqs:ExportsOutputRefvpcPrivateSubnet2Subnet7031C2BA60DCB1EE",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DockerImageFunctionm47testlambdateststackSqsEventSourceApiLambdaStackWithSqsm47testlambdateststackQueuem47testlambdateststack0DCC1590E76F915A": {
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:us-east-1:123456789012:test-queue",
        "FunctionName": {
          "Ref": "DockerImageFunctionm47testlambdateststackE2C1657B",
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test",
          },
          {
            "Key": "Project",
            "Value": "test",
          },
          {
            "Key": "StackId",
            "Value": "m47-test-lambda-test-stack",
          },
        ],
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "LambdaRole3A44B857": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "Roletest-functionTest",
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaRoleDefaultPolicy75625A82": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "lambda:InvokeFunction",
                "lambda:InvokeAsync",
                "rds-data:*",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "ds:CreateComputer",
                "ds:DescribeDirectories",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:GetParameterHistory",
                "ssm:GetParametersByPath",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ListQueues",
                "sns:Publish",
                "cloudformation:DescribeStacks",
                "cloudformation:ListStackResources",
                "cloudwatch:ListMetrics",
                "cloudwatch:GetMetricData",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "kms:ListAliases",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:ListAttachedRolePolicies",
                "iam:ListRolePolicies",
                "iam:ListRoles",
                "lambda:*",
                "states:DescribeStateMachine",
                "states:ListStateMachines",
                "tag:GetResources",
                "xray:GetTraceSummaries",
                "xray:BatchGetTraces",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "iam:PassRole",
              "Condition": {
                "StringEquals": {
                  "iam:PassedToService": "lambda.amazonaws.com",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:DescribeLogStreams",
                "logs:GetLogEvents",
                "logs:FilterLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:TagResource",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*",
            },
            {
              "Action": [
                "s3:*",
                "s3-object-lambda:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:sqs:us-east-1:123456789012:test-queue",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaRoleDefaultPolicy75625A82",
        "Roles": [
          {
            "Ref": "LambdaRole3A44B857",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SecurityGroupm47testlambdateststack0D75B4A8": {
      "Properties": {
        "GroupDescription": "m47-test-lambda-test-stack-SecurityGroup2",
        "GroupName": "m47-test-lambda-test-stack-SecurityGroup2",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTPS outbound",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTP outbound",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          {
            "CidrIp": {
              "Fn::ImportValue": "ApiLambdaStackWithSqs:ExportsOutputFnGetAttvpcA2121C38CidrBlock8A3D0BD6",
            },
            "Description": "Allow PostgreSQL inbound from VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
          {
            "CidrIp": "10.0.0.0/16",
            "Description": "Allow PostgreSQL inbound from legacy VPC",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
        ],
        "VpcId": {
          "Fn::ImportValue": "ApiLambdaStackWithSqs:ExportsOutputRefvpcA2121C384D1B3CDE",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
